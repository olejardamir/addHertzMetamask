{"version":3,"sources":["SwitchNetworkNotice.jsx","DownloadMetaMaskButton.jsx","AddTokenPanel.jsx","App.js","registerServiceWorker.js","index.js","switch-network.jpg","download-metamask.png","coin.jpg"],"names":["SwitchNetworkNotice","this","props","net","tokenNet","nameForNetwork","src","switchNetwork","alt","network","name","Component","DownloadMetaMaskButton","href","className","downloadButton","metaMarkAddress","AddTokenPanel","tokenName","tokenSymbol","tokenDecimals","totalSupply","tokenAddress","tokenImage","message","errorMessage","state","search","window","location","params","queryString","parse","key","updateNet","setState","provider","web3","currentProvider","eth","Eth","net_version","realNet","context","error","logo","onClick","event","a","sendAsync","method","id","Math","round","random","err","added","console","log","contextTypes","PropTypes","object","App","web3UnavailableScreen","BrowserRouter","basename","process","HashRouter","hashType","Switch","Route","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.a8592360.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport switchNetwork from './switch-network.jpg';\n\nclass SwitchNetworkNotice extends Component {\n  render () {\n    const {net, tokenNet} = this.props\n\n    return (\n      <div>\n        <h1>Add Token</h1>\n        <h2>Wrong Network Detected</h2>\n        <p>You have {this.nameForNetwork(net)} selected, but this token requires {this.nameForNetwork(tokenNet)}. Please switch the current network in your web3 client.</p>\n        <p>You can switch your current network in MetaMask like this:</p>\n        <img src={switchNetwork} alt=\"Network can be switched in the MetaMask network menu in the top right hand corner.\"/>\n      </div>\n    )\n  }\n\n  nameForNetwork (network) {\n    let name = ''\n    switch (network) {\n      case '1': // main net\n        name = 'The Main Ethereum Network'\n        break\n      case '2': // legacy ropsten test net\n        name = 'The OLD Ropsten Test Network'\n        break\n      case '3': // ropsten test net\n        name = 'The Ropsten Test Network'\n        break\n      case '4': // rinkeby test net\n        name = 'The Rinkeby Test Network'\n        break\n      case '42': // kovan test net\n        name = 'The Kovan Test Network'\n        break\n      default:\n        name = `Network #${network}`\n    }\n    return name\n  }\n}\n\n\n\nexport default SwitchNetworkNotice;\n\n","import React, { Component } from 'react';\nimport downloadButton from './download-metamask.png';\n\nclass DownloadMetaMaskButton extends Component {\n  render() {\n    return (\n      <a href=\"https://metamask.io\">\n        <img className=\"downloadButton\" src={downloadButton} alt=\"Download MetaMask\"/>\n      </a>\n    )\n  }\n}\n\nexport default DownloadMetaMaskButton\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SwitchNetworkNotice from './SwitchNetworkNotice'\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport DownloadMetaMaskButton from './DownloadMetaMaskButton';\nimport Eth from 'ethjs-query';\nimport logo from './coin.jpg';\nimport queryString from 'querystringify'\n\nconst metaMarkAddress = '0x6a4b6316D1d03d2f2B3A0294502F8fAF0F38cA14';\n\nclass AddTokenPanel extends Component {\n\n  constructor (props) {\n    const {\n      tokenName = 'Hertz',\n        tokenSymbol = 'HZ',\n        tokenDecimals = 18,\n        totalSupply = '21,000.00',\n        tokenAddress = metaMarkAddress,\n        tokenImage = 'https://raw.githubusercontent.com/olejardamir/Hertz/master/roundLogo_400by400.png',\n        tokenNet = '1',\n        message = '',\n        errorMessage = '',\n        net = '1',\n    } = props\n\n    super()\n    this.state = {\n      tokenName,\n      tokenSymbol,\n      tokenDecimals,\n      totalSupply,\n      tokenAddress,\n      tokenImage,\n      tokenNet,\n      message,\n      errorMessage,\n      net,\n    }\n\n    const search = window.location.search\n    const params = queryString.parse(search)\n\n    for (let key in params) {\n      this.state[key] = params[key]\n    }\n\n    this.updateNet()\n  }\n\n  componentDidMount() {\n    const search = this.props.location.search\n    const params = queryString.parse(search)\n    this.setState(params)\n  }\n\n  async updateNet () {\n    const provider = window.web3.currentProvider\n    const eth = new Eth(provider)\n    const realNet = await eth.net_version()\n    this.setState({ net: realNet })\n  }\n\n  render (props, context) {\n    const {\n      tokenName,\n      tokenSymbol,\n      tokenDecimals,\n      totalSupply,\n      tokenNet,\n      net,\n      tokenImage,\n      tokenAddress,\n      message,\n      errorMessage,\n    } = this.state\n\n    let error\n    if (errorMessage !== '') {\n      error = <p className=\"errorMessage\">\n        There was a problem adding this token to your wallet. Make sure you have the latest version of MetaMask installed!\n        <DownloadMetaMaskButton/>\n      </p>\n    }\n\n    if (tokenNet !== net) {\n      return <SwitchNetworkNotice net={net} tokenNet={tokenNet}/>\n    }\n\n    return (\n      <div className=\"values\">\n        <header className=\"App-header\">\n          <img src={tokenImage || logo} className=\"logo\" alt=\"Coin\"/>\n          <h1 className=\"App-title\">Add {tokenName} to Metamask: </h1>\n        </header>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>Symbol</TableCell>\n              <TableCell>{tokenSymbol}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Decimals</TableCell>\n              <TableCell>{tokenDecimals}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Total Supply</TableCell>\n              <TableCell>{totalSupply}</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n        <div><br/><br/><br/></div>\n        <div>\n          <Button\n            onClick = {async (event) => {\n              const provider = window.web3.currentProvider\n              provider.sendAsync({\n                method: 'metamask_watchAsset',\n                params: {\n                  \"type\":\"ERC20\",\n                  \"options\":{\n                    \"address\": tokenAddress,\n                    \"symbol\": tokenSymbol,\n                    \"decimals\": tokenDecimals,\n                    \"image\": tokenImage,\n                  },\n                },\n                id: Math.round(Math.random() * 100000),\n              }, (err, added) => {\n                console.log('provider returned', err, added)\n                if (err || 'error' in added) {\n                  this.setState({\n                    errorMessage: 'There was a problem adding the token.',\n                    message: '',\n                  })\n                  return\n                }\n                this.setState({\n                  message: '',\n                  errorMessage: '',\n                })\n              })\n            }}\n          >Click here to add to MetaMask</Button>\n        </div>\n\n        <p>{message}</p>\n        {error}\n\n        <div className=\"spacer\"></div>\n\n\n\n      </div>\n    )\n  }\n}\n\nAddTokenPanel.contextTypes = {\n  web3: PropTypes.object,\n}\n\nexport default AddTokenPanel;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Web3Provider } from 'react-web3';\nimport AddTokenPanel from './AddTokenPanel';\nimport DownloadMetaMaskButton from './DownloadMetaMaskButton';\nimport { BrowserRouter, Route, Switch, HashRouter } from 'react-router-dom';\n\nclass App extends Component {\n\n  render(props, context) {\n    return (\n      <div className=\"App\">\n\n        <Web3Provider\n          web3UnavailableScreen={() => <div>\n            <p>You need an add-on like MetaMask to use this web-page.</p>\n            <DownloadMetaMaskButton/>\n          </div>}\n        >\n          <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <HashRouter hashType=\"noslash\">\n              <Switch>\n                <Route path=\"/\" component={AddTokenPanel} />\n              </Switch>\n            </HashRouter>\n          </BrowserRouter>\n        </Web3Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/switch-network.508f95cd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/download-metamask.14c35a62.png\";","module.exports = __webpack_public_path__ + \"static/media/coin.622da729.jpg\";"],"sourceRoot":""}